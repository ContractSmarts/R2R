volumes:
  # Named volumes (Docker-managed)
  minio_data:
  postgres_data:
  # Remove hatchet_postgres_data since we're using one postgres
  hatchet_rabbitmq_data:
  hatchet_certs:
  hatchet_api_key:
  
  # Keep these as named but they're still bind-mounted where needed
  scripts:
    name: scripts
  user_configs:
    name: user_configs
  user_tools:
    name: user_tools
  hatchet_rabbitmq_conf:
    name: hatchet_rabbitmq_conf
  hatchet_config:
    name: hatchet_config

services:
  postgres:
    image: pgvector/pgvector:pg16
    profiles: [postgres]
    env_file:
      - ./env/cs-r2r.env
      - ./env/secrets.env
    environment:
      - POSTGRES_USER=${R2R_POSTGRES_USER:-raguser}
      - POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=${R2R_POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${R2R_POSTGRES_PORT:-5432}
      - PGPORT=${R2R_POSTGRES_PORT:-5432}
      - POSTGRES_DBNAME=${R2R_POSTGRES_DBNAME:-ragdb}
      - POSTGRES_MAX_CONNECTIONS=${R2R_POSTGRES_MAX_CONNECTIONS:-1024}
      - POSTGRES_STATEMENT_CACHE_SIZE=${R2R_POSTGRES_STATEMENT_CACHE_SIZE:-100}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${R2R_POSTGRES_PORT:-5432}:${R2R_POSTGRES_PORT:-5432}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${R2R_POSTGRES_USER:-raguser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: >
      postgres
      -c max_connections=1024

  minio:
    image: minio/minio
    profiles: [minio]
    env_file:
      - ./env/cs-r2r.env
      - ./env/secrets.env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: server /data --console-address ":9001"

  graph_clustering:
    image: ragtoriches/cluster-prod
    ports:
      - "7276:7276"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  r2r:
    image: sciphiai/r2r:latest
    ports:
      - "7272:7272"
    env_file:
      - ./env/cs-r2r.env
      - ./env/secrets.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - ./config/user:/app/user_configs
      - ./user_tools:/app/user_tools
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      graph_clustering:
        condition: service_healthy

  r2r-dashboard:
    image: sciphiai/r2r-dashboard:1.0.3
    env_file:
      - ./env/cs-r2r.env
      - ./env/secrets.env
    ports:
      - "7273:3000"

  unstructured:
    image: ragtoriches/unst-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # REMOVED: hatchet-postgres service entirely

  hatchet-rabbitmq:
    image: "rabbitmq:3-management"
    hostname: "hatchet-rabbitmq"
    ports:
      - "5673:5672"
      - "15673:15672"
    env_file:
      - ./env/cs-r2r.env
      - ./env/secrets.env
      - ./env/hatchet.env
    volumes:
      - hatchet_rabbitmq_data:/var/lib/rabbitmq
      - ./conf/hatchet_rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  hatchet-create-db:
    image: postgres:latest
    profiles: [setup]
    command: sh /scripts/create-hatchet-db.sh
    volumes:
      - ./scripts:/scripts
    env_file:
      - ./env/hatchet.env
    depends_on:
      postgres:  # Changed from hatchet-postgres
        condition: service_healthy

  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.53.15
    profiles: [setup]
    env_file:
      - ./env/hatchet.env
    depends_on:
      hatchet-create-db:
        condition: service_completed_successfully

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    profiles: [setup]
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    env_file:
      - ./env/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs 
      - ./config/hatchet_config:/hatchet/config
    depends_on:
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy

  setup-token:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    profiles: [setup]
    command: sh /scripts/setup-token.sh
    env_file:
      - ./env/hatchet.env
    volumes:
      - ./scripts:/scripts
      - ./conf/hatchet:/hatchet/config
      - hatchet_certs:/hatchet/certs
      - hatchet_api_key:/hatchet_api_key
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.53.15
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    ports:
      - "7077:7077"
    env_file:
      - ./env/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - ./config/hatchet:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8733/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:  # Changed from hatchet-postgres
        condition: service_healthy
      hatchet-rabbitmq:
        condition: service_healthy

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:v0.53.15
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure
    env_file:
      - ./env/hatchet.env
    volumes:
      - hatchet_certs:/hatchet/certs
      - ./conf/hatchet:/hatchet/config
    ports:
      - "7274:80"
    depends_on:
      hatchet-engine:
        condition: service_healthy
