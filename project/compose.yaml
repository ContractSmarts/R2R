name: contractsmarts

# `docker compose` resolves variables at compose time from:
# 1. Shell environment variables
# 2. .env file in the same directory as the compose.yaml file
# 3. NOT from env_file entries (these are only passed to containers)

volumes:
  # (named volumes)
  postgres_data:
  minio_data:
  #hatchet_rabbitmq_data:
  #hatchet_certs:
  #hatchet_api_key:
  
networks:
  postgres:
    name: postgres_network
    driver: bridge
  backend:
    name: backend_network
    driver: bridge
  frontend:
    name: frontend_network
    driver: bridge

services:
  # Sole postgres install service. R2R, Hatchet, etc. use the same postgres database
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      # Superuser (admin) credentials - from .env
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Default database (will be created automatically)
      - POSTGRES_DB=postgres
      
      # PostgreSQL configuration
      - POSTGRES_MAX_CONNECTIONS=1024
      - POSTGRES_STATEMENT_CACHE_SIZE=100
      - PGPORT=5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: >
      postgres
      -c max_connections=1024
      -c shared_preload_libraries=vector

  ## after the first step, run `scripts/setup-db.sh`

  # MinIO is a self-hosted S3-compatible object storage service. It's used for:
  #   - File storage: PDFs, documents, images that R2R processes
  #   - Vector storage: Some R2R configurations use S3-compatible storage for vectors
  #   - Artifact storage: Processed documents, embeddings, etc.
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - backend
    ports:
      - "9000:9000"  # MinIO API (for debugging)
      - "9001:9001"  # MinIO Console (web UI for management)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command: server /data --console-address ":9001"

  # Graph clustering is a processing service that:
  #  - Performs clustering analysis on document embeddings/graphs
  #  - Is called by R2R for document processing and retrieval
  #  - Is an internal computational service (not user-facing)
  #  - Needs to communicate with other backend services
  graph_clustering:
    image: ragtoriches/cluster-prod
    networks:
      - backend
    # Remove ports for security (R2R will access via http://graph_clustering:7276)
    ports:
      - "7276:7276"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # The unstructured service handles document parsing and processing:
  #  - Extracts text from PDFs, Word docs, PowerPoint, etc.
  #  - Handles OCR for images and scanned documents
  #  - Converts various file formats into structured text for R2R
  #  - Called by R2R during document ingestion 
  unstructured:
    image: ragtoriches/unst-prod
    networks:
      - backend
    # Remove ports for security (R2R will access via http://unstructured:7275)
    ports:
      - "7275:7275"  # Remove this once R2R integration is working
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # R2R is the main RAG (Retrieval-Augmented Generation) application that:
  #  - Processes documents and creates embeddings
  #  - Performs semantic search and graph clustering
  #  - Stores data in PostgreSQL and MinIO object storage
  #  - Uses Hatchet for workflow orchestration
  #  - Provides REST API for RAG operations on port 7272
  r2r:
    image: sciphiai/r2r:3.6.4

    environment:
      # Database connection (R2R database)
      - R2R_POSTGRES_USER=${R2R_POSTGRES_USER}
      - R2R_POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD}
      - R2R_POSTGRES_HOST=postgres
      - R2R_POSTGRES_PORT=5432
      - R2R_POSTGRES_DBNAME=${R2R_POSTGRES_DBNAME}
      - R2R_LOG_LEVEL=DEBUG
      - LOG_LEVEL=DEBUG
      
      # MinIO object storage
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ENDPOINT=http://minio:9000
      
      # Service endpoints (internal Docker network)
      - GRAPH_CLUSTERING_ENDPOINT=http://graph_clustering:7276
      - UNSTRUCTURED_ENDPOINT=http://unstructured:7275
      
      # R2R configuration
      - R2R_PROJECT_NAME=${R2R_PROJECT_NAME:-contractsmarts_r2r}
      - R2R_CONFIG_PATH=/app/user_configs/azure_cs.toml

      # Unstructured configuration
      - UNSTRUCTURED_SERVICE_URL=http://unstructured:7275
      - UNSTRUCTURED_API_URL=https://api.unstructured.io/general/v0/general
      - UNSTRUCTURED_NUM_WORKERS=10

    volumes:
      - ./config/user:/app/user_configs
      - ./user_tools:/app/user_tools
    networks:
      - backend    # Access to MinIO, graph_clustering, unstructured, hatchet-engine
      - postgres   # Database access
    ports:
      - "7272:7272"  # R2R REST API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7272/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: on-failure
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      postgres:
        condition: service_healthy
      graph_clustering:
        condition: service_healthy
      unstructured:
        condition: service_healthy
      minio:
        condition: service_healthy
